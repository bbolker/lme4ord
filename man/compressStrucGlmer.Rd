% Generated by roxygen2 (4.0.1): do not edit by hand
\name{compressStrucGlmer}
\alias{compressStrucGlmer}
\title{Compress strucGlmer object}
\usage{
compressStrucGlmer(object, components, ...)
}
\arguments{
\item{object}{a \code{\link{strucGlmer}} object.}

\item{components}{components to compress.}

\item{...}{not used yet.}
}
\value{
an error message pointing to this help page.
}
\description{
This feature is not yet written, but is important enough that
current design decisions should reflect it's future possibility.
This proposal will help reduce the costs of keeping redundant
information in \code{\link{strucGlmer}} objects. The idea is to
store various components on disk, and then only retreive them when
necessary. This will require very consistent use of extractor
functions that have versions that can take a filename or
connection and retreive the component that way.
}
\section{What kind of redundancy are we talking about?}{

\code{\link{strucGlmer}} objects contain a
\code{\link{strucParseFormula}} object and a deviance
function. The environment of this deviance function contains many
objects, some of which are essentially replicated in the parsed
formula object. In particular, the matrices in the parsed formula
are \code{\link{repSparse}} objects whereas the matrices in the
environment of the deviance function are \code{Matrix} package
objects linked to \code{C++} objects through external pointers.
}

\section{Why do we want redundancy?}{

This redundancy makes the output module code easier to maintain,
while retaining a fast optimization module. In partiular, the
\code{\link{repSparse}} objects in the parsed formula make it
easier to write consistent and reuseable code, whereas the
\code{Matrix}/\code{C++} objects in the environment of the
deviance function facilitate relatively fast linear algebra.
}

